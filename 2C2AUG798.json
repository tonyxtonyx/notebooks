{"20161101-195937_907325325":{"orderNumber":8,"id":"20161101-195937_907325325","text":"%python\nplt.plot([3, 2, 1], label=r'$y=3-x$')","title":"Second line"},"20161101-200445_78775142":{"orderNumber":11,"id":"20161101-200445_78775142","text":"%python\nplt.title('Inline plotting example', fontsize=20)","title":"Add title"},"20161101-202024_1645454710":{"orderNumber":14,"id":"20161101-202024_1645454710","text":"Четвертый","title":"Add title"},"20160617-140439_1111727405":{"orderNumber":6,"id":"20160617-140439_1111727405","text":"%md\n### Iteratively updating a plot\n#### (a) Using multiple plots\nNow let's show an example where we update each element of the plot in a separate paragraph. However, you may have noticed that each matplotlib figure instance gets closed immediately after its shown. To fix this, we set the `close` property to `False` in our configuration:","title":null},"20161101-193533_2096366908":{"orderNumber":3,"id":"20161101-193533_2096366908","text":"%python\n# Figure 1\nplt.plot([1, 2, 3])\n\n# Figure 2\nplt.figure()\nplt.plot([3, 2, 1])","title":null},"20160617-002131_1552178409":{"orderNumber":2,"id":"20160617-002131_1552178409","text":"%md\nNotice how an explicit call to `show()` is not necessary. This is accomplished via a post-execute hook which tells Zeppelin to plot all currently open matplotlib figures after executing the rest of the paragraph.\n### Plotting multiple figures\nWe can easily plot multiple figures at once too:","title":null},"20161101-200541_1283841564":{"orderNumber":12,"id":"20161101-200541_1283841564","text":"%md\n####(b) Using a single plot\nTo iteratively update a single plot, we can leverage Zeppelin's built-in Angular Display System. Currently this feature is only available for the `pyspark` interpreter for raster (png and jpg) formats. To enable this, we must set a special `angular` flag to `True` in our configuration:","title":null},"20161101-200014_2113468597":{"orderNumber":9,"id":"20161101-200014_2113468597","text":"%python\nplt.xlabel(r'$x$', fontsize=20)\nplt.ylabel(r'$y$', fontsize=20)","title":"Label axes"},"20161101-200141_1493024813":{"orderNumber":10,"id":"20161101-200141_1493024813","text":"%python\nplt.legend(loc='upper center', fontsize=20)","title":"Add legend"},"20161101-201552_651686132":{"orderNumber":13,"id":"20161101-201552_651686132","text":"%pyspark\nplt.legend(loc='upper center', fontsize=20)","title":"Add legend"},"20160614-174657_1772993700":{"orderNumber":0,"id":"20160614-174657_1772993700","text":"Третий","title":null},"20160616-234947_579056637":{"orderNumber":5,"id":"20160616-234947_579056637","text":"%python\nz.configure_mpl(width=400, height=300, fmt='svg')\nplt.plot([1, 2, 3])","title":null},"20161102-124716_1703649609":{"orderNumber":15,"id":"20161102-124716_1703649609","text":"","title":null},"20161101-195657_1336292109":{"orderNumber":7,"id":"20161101-195657_1336292109","text":"%python\nplt.close() # Added here to reset the first plot when rerunning the paragraph\nz.configure_mpl(width=600, height=400, fmt='png', close=False)\nplt.plot([1, 2, 3], label=r'$y=x$')","title":"First line"},"20160614-174421_274483707":{"orderNumber":4,"id":"20160614-174421_274483707","text":"%md\n### Changing the default inline plotting behavior\nBoth the `python` and `pyspark` include a built-in function for changing some default inline plotting behavior. For example, we can change the default size of each figure in pixels to 400x300 in svg format using: ","title":null},"20161101-192232_289486976":{"orderNumber":1,"id":"20161101-192232_289486976","text":"Второй коммит","title":null}}